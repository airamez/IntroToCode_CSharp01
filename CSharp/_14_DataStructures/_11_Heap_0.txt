# Heap
  # Reference Material: https://www.geeksforgeeks.org/heap-data-structure/
  # Definition
    # A heap is a specialized tree-based data structure that satisfies the heap property
    # In a max heap, for any given node, its value is greater than or equal to the values of its children.
    # In a min heap, for any given node, the value is less than or equal to the values of its children.
    # This property must be true across the entire tree.
    # The values in a heap increase or decrease as we move down in the tree
    # The root has the highest (MAX Heap) or smallest (MIN Heap) value
  # Applications:
    # Priority Queues: Heaps are the data structures to implement priority queues.
      when elements need to be retrieved based on "priority" (max/min)
    # Heap Sort: Heap Sort uses Binary Heap to sort an array in O(nLogn) time.
    # Order statistics: The Heap data structure can be used to efficiently find the kth smallest 
      (or largest) element in data set.
  # Operations:
    # Insertion (Push): Add a new key at the end of the tree.
      If the new key is greater than its parent, then we swap the key with its parent.
      We keep repeating the above step, until the heap property is satisfied.
    # Extract Min (or Max): It is the process of retrieving and removing the node with the highest 
      (or lowest) value from a heap and ensuring that the heap property is maintained.
    # Heapify: This is the process of creating a heap from an array. 
      Heapify procedure can be applied to a node only if its children nodes are heapified.
      So the heapification must be performed in the bottom-up way.