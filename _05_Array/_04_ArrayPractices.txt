 1. Implement a routine to clone an array of integers: int[] Clone(int[])
 2. Implement a routine to read an array of integers from the Console: int[] ReadIntArray(string: label, int: length)
    Use 'label[index] = ' for each element
 3. Implement a routine to print an integer array allowing the options to provide a label and print the array inline or multi-line.
    - Inline: all elements of the array in a single line, separated by commna "," and inside open/close brackets: e.g [1,2,3,4,5]
    - Multi: each element in a new line after the index, the index should be inside brackets.
 4. Implement a routine to receive an integer array and return the min and max values as output parameters: FindMinAndMax(array, out min, out max)
 5. Implement a routine to calculate the average of an array of integer: decimal ArrayAverage(array)
 6. Implement a routine to return the first and last elements of an array of integers as output parameters: GetFirstAndLast(array, out first, out last)
 7. Implement a routine to fill an integer array with an specific value: Fill(array, start, end, value)
 8. Implement a routine to generate an integer array with randon numbers from a provided interval: int[] GenerateRandomArray(length, minValue, maxValue)
 9. Implement a routine to indicate if two arrays of integer are equals (have the same values on same indexes)
10. Implement a routine to check if an array of integer is palindrome
11. Implement a routine to reverse an integer array. Try it in-place
12. Implement a routine to return an array with all elements that are duplicated from an array of integer
13. Implement a routine to return how many times a value occurs in an array of integers
14. Implement a routine to return a new array with only unique values from an array of integers
15. Implement a routine to receive two arrays of integers and return an array with the intersection
16. Implement a routine to receive two arrays of integers and return a new array with the union
17. Implement a routine to indicate if an array is in ascendent order
18. Implement a routine to indicate if an array of integers has two values that sum to a provided value: bool HasSum(array, sum)
19. Implement a routine to receive two sorted arrays and return an union array sorted as well
20. Implement a routine to rotate an array n positions to the left: RotateLeft(array, offset).
21. Implement a routine to move all zeros of an integer array to the left side
22. Implement a routine to return the longest sequence of duplicated elements of an array of integers containing only 0s and 1s
23. Implement a routine to given an array of N non-negative integers representing an elevation map where the width of each bar is 1,
    compute how much water it is able to trap after raining.
24. Implement a routine to randomize an array of integer by changing the existing values indexes
25. Implement a game of decoding a sequence of integer digits
    The game rules are:
    - Generate an array of random integer digits without duplication
    - Allow the player to provide 5 numbers each turn
    - Show * for each digit that is in a correct position
    - Show + for each digit that is out position
    - Show - for each digit that is not part of the list
    - Keep the game until the player get all five *
    Example:
    Secret: 02815
    Turn 1
    Input:  69234
    Output: --+--   
    Turn 2
    Input:  02784
    Ouput:  **-+-
    Turn 3
    Input:  02681
    Output: **-++
    Turn 4
    Input:  02851
    Output: ***++
    Turn 5
    Input:  02815
    Output: *****
    Congrats, You won!